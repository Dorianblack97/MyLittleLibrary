@page "/film"
@using MyLittleLibrary.Domain
@using MyLittleLibrary.Infrastructure
@inject FilmRepository FilmRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Films</PageTitle>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 px-2 px-sm-4">
    <MudPaper Elevation="3" Class="pa-2 pa-sm-4 mb-4">
        <div class="d-flex flex-column flex-sm-row justify-space-between align-center gap-2">
            <MudText Typo="Typo.h4" Class="mb-2 mb-sm-0">Film Collection</MudText>

            <div class="d-flex flex-column flex-sm-row gap-2 w-100 w-sm-auto">
                <MudButton
                    Variant="Variant.Filled"
                    Color="Color.Secondary"
                    StartIcon="@Icons.Material.Filled.Add"
                    OnClick="OpenAddFilmDialog"
                    Class="mb-2 mb-sm-0"
                    Style="touch-action: manipulation;"
                    FullWidth="true"
                    Size="Size.Medium">
                    Add New Film
                </MudButton>
                <MudButton
                    Variant="Variant.Filled"
                    Color="Color.Secondary"
                    StartIcon="@Icons.Material.Filled.Settings"
                    Href="/manage-films"
                    Class="mb-2 mb-sm-0"
                    Style="touch-action: manipulation;"
                    FullWidth="true"
                    Size="Size.Medium">
                    Manage Collections
                </MudButton>
            </div>
        </div>
    </MudPaper>

    @if (isLoading)
    {
        <div class="d-flex justify-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        </div>
    }
    else if (films.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Class="my-4">Your film collection is empty. Start adding films!</MudAlert>
    }
    else
    {
        <MudGrid>
            @foreach (var film in films)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xxl="2">
                    <MudPaper Elevation="3" Class="pa-4 mb-4 cursor-pointer"
                              @onclick="@(() => NavigateToFilmDetails(film.Title))">
                        <MudGrid>
                            <MudItem xs="4">
                                @if (!string.IsNullOrEmpty(film.ImagePath))
                                {
                                    <img src="@film.ImagePath" alt="@film.Title"
                                         style="width: 100%; max-height: 150px; object-fit: cover;"/>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Movie" Size="Size.Large"
                                             Style="width: 100%; height: 150px;"/>
                                }
                            </MudItem>
                            <MudItem xs="8">
                                <MudText Typo="Typo.h5" 
                                         Style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">@film.Title</MudText>
                                <MudText Typo="Typo.body2" Class="text-truncate d-block">Director: @film.Director</MudText>
                                <MudText Typo="Typo.body2" Class="text-truncate d-block">Format: @film.Format</MudText>
                                @if (film.ReleaseDate.HasValue)
                                {
                                    <MudText Typo="Typo.body2" Class="text-truncate d-block">Released: @film.ReleaseDate.Value.Year</MudText>
                                }
                                <MudText Typo="Typo.caption">
                                    @if (film.IsWatched)
                                    {
                                        <MudChip T="string" Color="Color.Success" Size="Size.Small">Watched</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip T="string" Color="Color.Warning" Size="Size.Small">Unwatched</MudChip>
                                    }
                                    <MudChip T="string" Color="Color.Default"
                                             Size="Size.Small"
                                             Icon="@GetFormatIcon(film.Format)">
                                        @film.Format
                                    </MudChip>
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private bool isLoading = true;
    private List<Video.Film> films = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFilmCollection();
    }

    private async Task LoadFilmCollection()
    {
        isLoading = true;
        try
        {
            films = await FilmRepository.GetAllAsync();
            films = films.OrderBy(f => f.Title).ToList();
        }
        catch (Exception)
        {
            // Handle exceptions
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToFilmDetails(string title)
    {
        NavigationManager.NavigateTo($"/films/filminfo?title={Uri.EscapeDataString(title)}");
    }

    private async Task OpenAddFilmDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Small,
            BackdropClick = false
        };

        var dialog = await DialogService.ShowAsync<FilmDialog>("Add New Film", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Film successfully added!", Severity.Success);
            await LoadFilmCollection();
        }
    }

    private string GetFormatIcon(VideoFormat format)
    {
        return format switch
        {
            VideoFormat.BluRay => Icons.Material.Filled.Album,
            VideoFormat.BluRay4k => Icons.Material.Filled.Album,
            VideoFormat.Dvd => Icons.Material.Filled.Album,
            VideoFormat.Digital => Icons.Material.Filled.CloudDownload,
            VideoFormat.Vhs => Icons.Material.Filled.Videocam,
            _ => Icons.Material.Filled.Movie
        };
    }
}