@page "/lightnovel"
@using MyLittleLibrary.Infrastructure
@inject LightNovelRepository LightNovelRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<PageTitle>Light Novel</PageTitle>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 px-2 px-sm-4">
    <MudPaper Elevation="3" Class="pa-2 pa-sm-4 mb-4">
        <div class="d-flex flex-column flex-sm-row justify-space-between align-center gap-2">
            <MudText Typo="Typo.h4" Class="mb-2 mb-sm-0">Light Novel Collection</MudText>

            <div class="d-flex flex-column flex-sm-row gap-2 w-100 w-sm-auto">
                <MudButton
                    Variant="Variant.Filled"
                    Color="Color.Secondary"
                    StartIcon="@Icons.Material.Filled.Add"
                    OnClick="OpenAddLightNovelDialog"
                    Class="mb-2 mb-sm-0"
                    Style="touch-action: manipulation;"
                    FullWidth="true"
                    Size="Size.Medium">
                    Add New Light Novel
                </MudButton>
                <MudButton
                    Variant="Variant.Filled"
                    Color="Color.Secondary"
                    StartIcon="@Icons.Material.Filled.Settings"
                    Href="/manage-lightnovels"
                    Class="mb-2 mb-sm-0"
                    Style="touch-action: manipulation;"
                    FullWidth="true"
                    Size="Size.Medium">
                    Manage Collections
                </MudButton>
            </div>
        </div>
    </MudPaper>


    @if (isLoading)
    {
        <div class="d-flex justify-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        </div>
    }
    else if (lightNovelSeries.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Class="my-4">Your light novel collection is empty. Start adding light novels!</MudAlert>
    }
    else
    {
        <MudGrid>
            @foreach (var series in lightNovelSeries)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xxl="2">
                    <MudPaper Elevation="3" Class="pa-4 mb-4 cursor-pointer"
                              @onclick="@(() => NavigateToSeriesDetails(series.Title))">
                        <MudGrid>
                            <MudItem xs="4">
                                @if (!string.IsNullOrEmpty(series.CoverImage))
                                {
                                    <MudImage 
                                        Src="@series.CoverImage" 
                                        Alt="@series.Title"
                                        ObjectFit="ObjectFit.Cover"
                                        Height="150"
                                        Elevation="0" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Book" Size="Size.Large"
                                             Style="width: 100%; height: 150px;"/>
                                }
                            </MudItem>
                            <MudItem xs="8">
                                <MudText Typo="Typo.h5" 
                                         Style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">@series.Title</MudText>
                                <MudText Typo="Typo.body1" Class="text-truncate d-block">Volumes: @series.VolumeCount</MudText>
                                <MudText Typo="Typo.body2" Class="text-truncate d-block">Author: @series.Author</MudText>
                                <MudText Typo="Typo.body2" Class="text-truncate d-block">Illustrator: @series.Illustrator</MudText>
                                <MudText Typo="Typo.caption">
                                    @if (series.CompletionPercentage == 100)
                                    {
                                        <MudChip T="string" Color="Color.Success" Size="Size.Small">Completed</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip T="string" Color="Color.Info"
                                                 Size="Size.Small">@series.CompletionPercentage%
                                        </MudChip>
                                    }
                                    <MudChip T="string" Color="Color.Default"
                                             Size="Size.Small"
                                             Icon="@(series.IsDigital ? Icons.Material.Filled.PhoneAndroid : Icons.Material.Filled.Book)">
                                        @(series.IsDigital ? "Digital" : "Physical")
                                    </MudChip>
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private bool isLoading = true;
    private List<LightNovelSeries> lightNovelSeries = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadLightNovelCollection();
    }

    private async Task LoadLightNovelCollection()
    {
        isLoading = true;

        try
        {
            // Get all light novels from the repository
            var allLightNovels = await LightNovelRepository.GetAllAsync();

            // Group light novels by title to create series
            lightNovelSeries = allLightNovels
                .GroupBy(ln => ln.Title)
                .Select(group => new LightNovelSeries
                {
                    Title = group.Key,
                    Author = group.First().Author, // Assuming same author for all volumes
                    Illustrator = group.First().Illustrator, // Assuming same illustrator for all volumes
                    IsDigital = group.First().IsDigital,
                    VolumeCount = group.Count(),
                    CoverImage = group.OrderBy(ln => ln.Volume).LastOrDefault()?.ImagePath,
                    CompletionPercentage = (int)(group.Count(ln => ln.IsRead) * 100.0 / group.Count())
                })
                .OrderBy(s => s.Title)
                .ToList();
        }
        catch (Exception)
        {
            // Handle any exceptions
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToSeriesDetails(string title)
    {
        // Navigate to the LightNovelInfo page with the title as a query parameter
        NavigationManager.NavigateTo($"/lightnovel/lightnovelinfo?title={Uri.EscapeDataString(title)}");
    }

    private async Task OpenAddLightNovelDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Small,
            BackdropClick = false // Prevents accidental closing on mobile
        };

        var dialog = await DialogService.ShowAsync<LightNovelDialog>("Add New Light Novel", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Light Novel successfully added!", Severity.Success);
            // Force a reload with a slight delay to ensure file is fully saved
            await Task.Delay(100); // Small delay to ensure file system operations complete
            await LoadLightNovelCollection(); // Reload the light novel list
            StateHasChanged(); // Force UI refresh
        }
    }

    // Helper class to represent a light novel series
    public class LightNovelSeries
    {
        public string Title { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
        public string Illustrator { get; set; } = string.Empty;
        public bool IsDigital { get; set; }
        public int VolumeCount { get; set; }
        public string? CoverImage { get; set; }
        public int CompletionPercentage { get; set; }
    }
}