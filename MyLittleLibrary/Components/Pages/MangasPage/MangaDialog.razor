@using MyLittleLibrary.Domain
@using MyLittleLibrary.Infrastructure
@using System.IO
@using Microsoft.AspNetCore.Hosting
@inject MangaRepository MangaRepository
@inject IWebHostEnvironment Environment

@inherits Shared.BookUploadDialog

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(IsEdit ? Icons.Material.Filled.Edit : Icons.Material.Filled.Add)" Class="mr-2"/>
            @(IsEdit ? $"Edit {BookType}" : $"Add New {BookType}")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Book.Title" Label="Title" Required="true"
                                  RequiredError="Title is required!"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Book.Author" Label="Author" Required="true"
                                  RequiredError="Author is required!"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Book.Illustrator" Label="Illustrator"/>
                </MudItem>
                
                @if (!IsEdit)
                {
                    <MudItem xs="12">
                        <MudSwitch @bind-Value="isMultipleVolumes" Label="Create Multiple Volumes" Color="Color.Primary" />
                    </MudItem>
                }
                
                @if (IsEdit || !isMultipleVolumes)
                {
                    <MudItem xs="6">
                        <MudNumericField @bind-Value="Book.Volume" Label="Volume" Required="true" Min="1"/>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="6">
                        <MudNumericField @bind-Value="startVolume" Label="Start Volume" Required="true" Min="1"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField @bind-Value="endVolume" Label="End Volume" Required="true" Min="@startVolume"/>
                    </MudItem>
                }
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="publishDate" Label="Publish Date"/>
                </MudItem>
                <MudItem xs="12">
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" Accept=".jpg,.jpeg,.png,.webp"
                                  MaximumFileCount="@(IsEdit || !isMultipleVolumes ? 1 : maxFileUploadCount)">
                        <ActivatorContent>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Image">
                                @(IsEdit || !isMultipleVolumes ? "Upload Cover Image" : "Add Cover Images")
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    
                    @if (!IsEdit && isMultipleVolumes)
                    {
                        <MudText Typo="Typo.caption" Color="Color.Info" Class="mt-1">
                            Maximum of @maxFileUploadCount files. Images should follow naming convention: [TitleSlug]_[VolumeNumber]
                        </MudText>
                    }
                    
                    @if (hasUploadErrors)
                    {
                        <MudAlert Severity="Severity.Error" Class="mt-2" ShowCloseIcon="true" CloseIconClicked="() => { hasUploadErrors = false; uploadErrorMessage = string.Empty; }">
                            @uploadErrorMessage
                        </MudAlert>
                    }
                    
                    @if ((IsEdit || !isMultipleVolumes) && !string.IsNullOrEmpty(Book.ImagePath))
                    {
                        <div class="d-flex align-center mt-2">
                            <MudText Class="mr-2">Image selected:</MudText>
                            <MudChip T="string" Color="Color.Success"
                                     Icon="@Icons.Material.Filled.Check">@System.IO.Path.GetFileName(Book.ImagePath)</MudChip>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" Size="Size.Small"
                                           OnClick="ClearSelectedImage"/>
                        </div>
                    }
                    @if (!IsEdit && isMultipleVolumes && uploadedFiles.Any())
                    {
                        <div class="d-flex flex-column mt-2">
                            <MudText>Uploaded Images (@uploadedFiles.Count):</MudText>
                            <div class="d-flex flex-wrap gap-1 mt-1">
                                @foreach (var file in uploadedFiles)
                                {
                                    <MudChip 
                                        T="string" 
                                        Color="@(invalidImageNames.Contains(file.Name) ? Color.Error : Color.Success)"
                                        Icon="@(invalidImageNames.Contains(file.Name) ? Icons.Material.Filled.Error : Icons.Material.Filled.Check)" 
                                        OnClick="@(() => RemoveUploadedFile(file))" 
                                        Variant="Variant.Filled"
                                        Class="cursor-pointer">
                                        @file.Name
                                    </MudChip>
                                }
                            </div>
                            <MudButton Class="mt-2" Color="Color.Error" Variant="Variant.Text" 
                                       OnClick="ClearAllSelectedImages">Clear All</MudButton>
                        </div>
                    }
                </MudItem>
                <MudItem xs="6">
                    <MudSwitch @bind-Value="isDigital" Label="Digital Copy" Color="Color.Primary"/>
                </MudItem>
                <MudItem xs="6">
                    <MudSwitch @bind-Value="isRead" Label="Already Read" Color="Color.Secondary"/>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="Submit"
                   Disabled="@(!success || isSubmitting)">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Saving</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Book.Manga? MangaToEdit { get; set; }
    
    private MangaMutable manga = new();
    
    protected override void InitializeData()
    {
        // Initialize with default or existing manga data
        manga = new MangaMutable();
        Book = manga;
        BookType = "Manga";
        
        if (MangaToEdit is not null)
        {
            // Store original values
            originalId = MangaToEdit.Id;
            
            // Initialize form with existing manga data
            manga.SetTitle(MangaToEdit.Title);
            manga.Author = MangaToEdit.Author;
            manga.Illustrator = MangaToEdit.Illustrator;
            manga.Volume = MangaToEdit.Volume;
            manga.ImagePath = MangaToEdit.ImagePath;
            manga.SetTitleSlug(MangaToEdit.TitleSlug);
            publishDate = MangaToEdit.PublishDate;
            
            // Initialize switch values from existing manga
            isDigital = MangaToEdit.IsDigital;
            isRead = MangaToEdit.IsRead;
        }
    }
    
    protected override async Task UpdateSingle()
    {
        // Update image path one more time to ensure it uses latest title/volume
        if (uploadedFile != null)
        {
            var fileExtension = Path.GetExtension(uploadedFile.Name);
            var fileName = $"{manga.TitleSlug}_{manga.Volume}{fileExtension}";
            manga.ImagePath = Path.Combine("images", manga.TitleSlug, fileName);

            await SaveImageToFilePath(uploadedFile, manga.ImagePath);
        }

        // Convert from mutable model to immutable record
        var mangaRecord = new Book.Manga(
            manga.Title,
            manga.TitleSlug,
            manga.Author,
            manga.Illustrator,
            manga.Volume,
            manga.ImagePath,
            isDigital,
            isRead,
            publishDate,
            originalId
        );

        await MangaRepository.UpdateAsync(originalId, mangaRecord);
    }
    
    protected override async Task CreateSingle()
    {
        // Process the uploaded image if available
        if (uploadedFile != null)
        {
            var fileExtension = Path.GetExtension(uploadedFile.Name);
            var fileName = $"{manga.TitleSlug}_{manga.Volume}{fileExtension}";
            manga.ImagePath = Path.Combine("images", manga.TitleSlug, fileName);
            
            await SaveImageToFilePath(uploadedFile, manga.ImagePath);
        }
        
        // Create a new manga record
        var newManga = new Book.Manga(
            manga.Title,
            manga.TitleSlug,
            manga.Author,
            manga.Illustrator,
            manga.Volume,
            manga.ImagePath,
            isDigital,
            isRead,
            publishDate
        );
        
        await MangaRepository.CreateAsync(newManga);
    }
    
    protected override async Task CreateMultiple()
    {
        // Create a directory if it doesn't exist
        var dirPath = Path.Combine(Environment.WebRootPath, "images", manga.TitleSlug);
        Directory.CreateDirectory(dirPath);
        
        // Map of volume numbers to their respective image files
        var volumeImageMap = new Dictionary<int, IBrowserFile>();
        
        // Parse volume numbers from file names and map them to files
        foreach (var file in uploadedFiles.Where(f => !invalidImageNames.Contains(f.Name)))
        {
            var fileName = Path.GetFileNameWithoutExtension(file.Name);
            var expectedNamePattern = $"{manga.TitleSlug}_";
            
            if (fileName.StartsWith(expectedNamePattern))
            {
                var volumeStr = fileName.Substring(expectedNamePattern.Length);
                if (int.TryParse(volumeStr, out int volumeNumber) && 
                    volumeNumber >= startVolume && volumeNumber <= endVolume)
                {
                    volumeImageMap[volumeNumber] = file;
                }
            }
        }
        
        // Create a manga volume for each specified volume
        for (int volume = startVolume; volume <= endVolume; volume++)
        {
            string? imagePath = null;
            
            // Check if we have an image for this volume
            if (volumeImageMap.TryGetValue(volume, out var imageFile))
            {
                var fileExtension = fileExtensionMap[imageFile.Name];
                var fileName = $"{manga.TitleSlug}_{volume}{fileExtension}";
                var filePath = Path.Combine(dirPath, fileName);
                
                await using FileStream fs = new(filePath, FileMode.Create);
                await imageFile.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(fs);
                
                // Set the image path
                imagePath = Path.Combine("images", manga.TitleSlug, fileName);
            }
            
            // Create and save the manga volume
            var newManga = new Book.Manga(
                manga.Title,
                manga.TitleSlug,
                manga.Author,
                manga.Illustrator,
                volume,
                imagePath,
                isDigital,
                isRead,
                publishDate
            );
            
            await MangaRepository.CreateAsync(newManga);
        }
    }
}