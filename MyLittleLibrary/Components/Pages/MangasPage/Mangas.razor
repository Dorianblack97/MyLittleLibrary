@page "/manga"
@using MyLittleLibrary.Components.Shared
@using MyLittleLibrary.Domain
@using MyLittleLibrary.Infrastructure
@inject MangaRepository MangaRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<PageTitle>Manga</PageTitle>
<div style="position: sticky; top: 64px; z-index: 1; padding-top: 8px;">
    <MudPaper Elevation="3" Class="pa-2 pa-sm-4 mb-4">
        <div class="d-flex flex-column flex-sm-row justify-space-between align-center gap-2">
            <MudText Typo="Typo.h4" Class="mb-2 mb-sm-0 mr-sm-4">Manga Collection</MudText>
            <MudTextField
                ValueChanged="@((string s) => SearchValueChanged(s))"
                Immediate="true"
                Placeholder="Search manga by title, author, or illustrator..."
                Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium"
                Class="mt-0 mb-2 mb-sm-0 flex-grow-1"
                Clearable="true"/>

            <div class="d-flex flex-column flex-sm-row gap-2 w-100 w-sm-auto">
                <MudButton
                    Variant="Variant.Filled"
                    Color="Color.Secondary"
                    StartIcon="@Icons.Material.Filled.Add"
                    OnClick="OpenAddMangaDialog"
                    Class="mb-2 mb-sm-0"
                    Style="touch-action: manipulation;"
                    FullWidth="true"
                    Size="Size.Medium">
                    Add New Manga
                </MudButton>
                <MudButton
                    Variant="Variant.Filled"
                    Color="Color.Secondary"
                    StartIcon="@Icons.Material.Filled.Settings"
                    Href="/manage-mangas"
                    Class="mb-2 mb-sm-0"
                    Style="touch-action: manipulation;"
                    FullWidth="true"
                    Size="Size.Medium">
                    Manage Collections
                </MudButton>
            </div>
        </div>
    </MudPaper>
</div>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 px-2 px-sm-4">
    @if (isLoading)
    {
        <div class="d-flex justify-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        </div>
    }
    else if (mangaSeries.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Class="my-4">Your manga collection is empty. Start adding manga!</MudAlert>
    }
    else
    {
        @if (filteredMangaSeries.Count == 0)
        {
            <MudAlert Severity="Severity.Info" Class="my-4">No manga found matching your search criteria.</MudAlert>
        }
        else
        {
            <MudGrid>
                @foreach (var series in filteredMangaSeries)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" xxl="2">
                        <MudPaper Elevation="3" Class="pa-4 mb-4 cursor-pointer"
                                  @onclick="@(() => NavigateToSeriesDetails(series.Title))">
                            <MudGrid>
                                <MudItem xs="4">
                                    @if (!string.IsNullOrEmpty(series.CoverImage))
                                    {
                                        <MudImage
                                            Src="@series.CoverImage"
                                            Alt="@series.Title"
                                            ObjectFit="ObjectFit.Cover"
                                            Elevation="0"
                                            Fluid="true"
                                            Style="max-height: 150px;"/>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Book" Size="Size.Large"
                                                 Style="width: 100%; height: 150px;"/>
                                    }
                                </MudItem>
                                <MudItem xs="8">
                                    <MudText Typo="Typo.h5"
                                             Style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">@series.Title</MudText>
                                    <MudText Typo="Typo.body1" Class="text-truncate d-block">
                                        Volumes: @series.VolumeCount</MudText>
                                    <MudText Typo="Typo.body2" Class="text-truncate d-block">
                                        Author: @series.Author</MudText>
                                    <MudText Typo="Typo.body2" Class="text-truncate d-block">
                                        Illustrator: @series.Illustrator</MudText>
                                    <MudText Typo="Typo.caption">
                                        @if (series.CompletionPercentage == 100)
                                        {
                                            <MudChip T="string" Color="Color.Success" Size="Size.Small">Readed
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Color="Color.Info" Icon="@(Icons.Material.Filled.AutoStories)"
                                                     Size="Size.Small">@series.CompletionPercentage%
                                            </MudChip>
                                        }
                                        <MudChip T="string" Color="Color.Default"
                                                 Size="Size.Small"
                                                 Icon="@(series.IsDigital ? Icons.Material.Filled.PhoneAndroid : Icons.Material.Filled.Book)">
                                            @(series.IsDigital ? "Digital" : "Physical")
                                        </MudChip>
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        }
    }
</MudContainer>

@code {
    private bool isLoading = true;
    private List<MangaSeries> mangaSeries = new();
    private List<MangaSeries> filteredMangaSeries = new();
    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadMangaCollection();
    }

    private async Task LoadMangaCollection()
    {
        isLoading = true;

        try
        {
            // Get all manga from the repository
            var allManga = await MangaRepository.GetAllAsync();

            // Group manga by title to create series
            mangaSeries = allManga
                .GroupBy(m => m.Title)
                .Select(group => new MangaSeries
                {
                    Title = group.Key,
                    Author = group.First().Author, // Assuming same author for all volumes
                    Illustrator = group.First().Illustrator, // Add this line
                    IsDigital = group.First().IsDigital,
                    VolumeCount = group.Count(),
                    CoverImage = group.OrderBy(m => m.Volume).LastOrDefault()?.ImagePath,
                    CompletionPercentage = (int)(group.Count(m => m.IsRead) * 100.0 / group.Count())
                })
                .OrderBy(s => s.Title)
                .ToList();

            // Initialize filtered list with all manga
            filteredMangaSeries = mangaSeries.ToList();
        }
        catch (Exception)
        {
            // Handle any exceptions
        }
        finally
        {
            isLoading = false;
        }
    }

    // Handle search text changes
    private void SearchValueChanged(string value)
    {
        searchString = value;
        FilterMangaSeries();
        StateHasChanged(); // Force UI update
    }

    // Filter manga series based on the search string
    private void FilterMangaSeries()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            // If search is empty, show all manga
            filteredMangaSeries = mangaSeries.ToList();
        }
        else
        {
            // Filter manga based on title, author, or illustrator
            var search = searchString.Trim().ToLowerInvariant();
            filteredMangaSeries = mangaSeries
                .Where(m =>
                    m.Title.ToLowerInvariant().Contains(search) ||
                    m.Author.ToLowerInvariant().Contains(search) ||
                    m.Illustrator.ToLowerInvariant().Contains(search))
                .ToList();
        }
    }

    private void NavigateToSeriesDetails(string title)
    {
        // Navigate to the MangaInfo page with the title as a query parameter
        NavigationManager.NavigateTo($"/manga/mangainfo?title={Uri.EscapeDataString(title)}");
    }

    private async Task OpenAddMangaDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Small,
            BackdropClick = false // Prevents accidental closing on mobile
        };

        var dialog = await DialogService.ShowAsync<MangaDialog>("Add New Manga", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Manga successfully added!", Severity.Success);
            // Force a reload with a slight delay to ensure file is fully saved
            await Task.Delay(100); // Small delay to ensure file system operations complete
            await LoadMangaCollection(); // Reload the manga list
            StateHasChanged(); // Force UI refresh
        }
    }

// Update the MangaSeries class
    public class MangaSeries
    {
        public string Title { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
        public string Illustrator { get; set; } = string.Empty;
        public bool IsDigital { get; set; }
        public int VolumeCount { get; set; }
        public string? CoverImage { get; set; }
        public int CompletionPercentage { get; set; }
    }

}